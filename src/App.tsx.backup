import React, { useState, useMemo } from 'react'
import { Calculator, TrendingUp, DollarSign, User, Search, Info, Brain, BarChart3, XCircle, Upload, Shield, PieChart, Building2, ClipboardList, Eye, Award, Wallet, FileText, Settings, HelpCircle, Home, ChevronLeft, Menu, X } from 'lucide-react'
import { CSVUploader } from './components/portfolio/CSVUploader'
import { ParseResult } from './types/portfolio'
import { Card } from './components/common/Card'
import PerformanceAnalysis from './components/portfolio/PerformanceAnalysis'
import { RiskAnalysis } from './components/portfolio/RiskAnalysis'
import { PerformanceCharts } from './components/portfolio/PerformanceCharts'
import { SectorAnalysis } from './components/portfolio/SectorAnalysis'

type NavigationView = 
  | 'dashboard' 
  | 'performance' 
  | 'risk' 
  | 'charts' 
  | 'sector' 
  | 'gips' 
  | 'tax' 
  | 'reports' 
  | 'holdings' 
  | 'xray' 
  | 'settings' 
  | 'costbasis'

interface DashboardCard {
  id: NavigationView
  title: string
  icon: React.ElementType
  description: string
  features: string[]
  premium?: boolean
  color: string
  metrics?: { label: string; value: string | number }[]
}

function App() {
  const [parseResult, setParseResult] = useState<ParseResult | null>(null)
  const [currentView, setCurrentView] = useState<NavigationView>('dashboard')
  const [isDarkMode, setIsDarkMode] = useState(true)
  const [showMobileMenu, setShowMobileMenu] = useState(false)
  const [portfolioName, setPortfolioName] = useState('My Portfolio')

  // Calculate portfolio metrics
  const portfolioMetrics = useMemo(() => {
    if (!parseResult) return null
    
    const totalValue = parseResult.holdings.reduce((sum, h) => sum + h.marketValue, 0)
    const topHolding = parseResult.holdings.reduce((max, h) => 
      h.marketValue > max.marketValue ? h : max, parseResult.holdings[0])
    const totalHoldings = parseResult.holdings.length
    
    // Calculate simple portfolio return (mock for now)
    const totalCost = totalValue * 0.85 // Mock 15% gain
    const totalReturn = ((totalValue - totalCost) / totalCost) * 100
    
    return {
      totalValue,
      totalHoldings,
      topHolding: topHolding?.symbol || 'N/A',
      totalReturn: totalReturn.toFixed(2),
      lastUpdated: new Date().toLocaleString()
    }
  }, [parseResult])

  const dashboardCards: DashboardCard[] = [
    {
      id: 'performance',
      title: 'Performance Analysis',
      icon: TrendingUp,
      description: 'Track P&L, time-weighted returns, and real market data',
      features: ['P&L Tracking', 'TWR Returns', 'Live Market Data', 'Historical Performance'],
      color: 'from-green-500 to-emerald-600',
      metrics: portfolioMetrics ? [
        { label: 'Total Return', value: `${portfolioMetrics.totalReturn}%` },
        { label: 'Holdings', value: portfolioMetrics.totalHoldings }
      ] : []
    },
    {
      id: 'risk',
      title: 'Risk Analysis',
      icon: Shield,
      description: 'Professional risk metrics with complete transparency',
      features: ['Sharpe Ratio', 'Beta & VaR', 'Stress Testing', 'Correlation Matrix'],
      color: 'from-blue-500 to-cyan-600',
      metrics: portfolioMetrics ? [
        { label: 'Risk Level', value: 'Moderate' },
        { label: 'Diversification', value: 'Good' }
      ] : []
    },
    {
      id: 'charts',
      title: 'Charts & Visualizations',
      icon: BarChart3,
      description: 'Interactive charts for portfolio insights',
      features: ['Performance Charts', 'Allocation Pie', 'Trend Analysis', 'Custom Views'],
      color: 'from-purple-500 to-pink-600',
      metrics: portfolioMetrics ? [
        { label: 'Charts', value: '12 Types' },
        { label: 'Real-time', value: 'Yes' }
      ] : []
    },
    {
      id: 'sector',
      title: 'Sector Analysis',
      icon: Building2,
      description: 'Understand your portfolio diversification and concentration',
      features: ['Sector Breakdown', 'Concentration Risk', 'Industry Allocation', 'Benchmarking'],
      color: 'from-orange-500 to-red-600',
      metrics: portfolioMetrics ? [
        { label: 'Sectors', value: '11' },
        { label: 'Top Sector', value: 'Technology' }
      ] : []
    },
    {
      id: 'gips',
      title: 'GIPS Compliance',
      icon: Award,
      description: 'Professional GIPS-compliant reporting worth $50K/year to RIAs',
      features: ['Certified Calculations', 'Audit Ready', 'Composite Returns', 'Verification Ready'],
      premium: true,
      color: 'from-yellow-500 to-amber-600',
      metrics: [
        { label: 'Value', value: '$50K/yr' },
        { label: 'Status', value: 'Premium' }
      ]
    },
    {
      id: 'tax',
      title: 'Tax Loss Harvesting',
      icon: Wallet,
      description: 'Save clients $10K+ annually with intelligent tax strategies',
      features: ['Loss Identification', 'Wash Sale Detection', 'Tax Alpha Reports', 'Optimization'],
      premium: true,
      color: 'from-indigo-500 to-purple-600',
      metrics: [
        { label: 'Savings', value: '$10K+' },
        { label: 'Status', value: 'Premium' }
      ]
    },
    {
      id: 'reports',
      title: 'Professional Reports',
      icon: FileText,
      description: 'Client-ready PDF exports with your branding',
      features: ['PDF Generation', 'White Label', 'Custom Templates', 'Batch Export'],
      color: 'from-gray-500 to-slate-600',
      metrics: portfolioMetrics ? [
        { label: 'Templates', value: '15+' },
        { label: 'Export', value: 'PDF/Excel' }
      ] : []
    },
    {
      id: 'holdings',
      title: 'Holdings Details',
      icon: ClipboardList,
      description: 'Complete portfolio table with all holding information',
      features: ['Full Details', 'Sorting & Filtering', 'Export Options', 'Real-time Updates'],
      color: 'from-teal-500 to-green-600',
      metrics: portfolioMetrics ? [
        { label: 'Holdings', value: portfolioMetrics.totalHoldings },
        { label: 'Top', value: portfolioMetrics.topHolding }
      ] : []
    },
    {
      id: 'xray',
      title: 'Data X-Ray',
      icon: Eye,
      description: '100% transparency - see every calculation and data point',
      features: ['Column Mapping', 'Raw Data View', 'Calculation Steps', 'Data Quality'],
      color: 'from-cyan-500 to-blue-600',
      metrics: portfolioMetrics ? [
        { label: 'Transparency', value: '100%' },
        { label: 'Columns', value: 0 }
      ] : []
    }
  ]

  const handleNavigation = (view: NavigationView) => {
    setCurrentView(view)
    setShowMobileMenu(false)
  }

  const handleCSVUpload = (data: ParseResult) => {
    setParseResult(data)
    setCurrentView('dashboard')
  }

  const handleReset = () => {
    setParseResult(null)
    setCurrentView('dashboard')
  }

  // Convert parsed data to portfolio format for components
  const portfolio = parseResult ? {
    holdings: parseResult.holdings.map(holding => ({
      symbol: holding.symbol,
      description: holding.name || '',
      quantity: holding.shares,
      price: holding.currentPrice,
      value: holding.marketValue
    })),
    totalValue: portfolioMetrics?.totalValue || 0,
    metadata: parseResult.metadata
  } : null

  const renderCurrentView = () => {
    if (!portfolio) return null

    switch (currentView) {
      case 'dashboard':
        return (
          <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-6 p-6">
            {dashboardCards.map((card) => (
              <div
                key={card.id}
                onClick={() => handleNavigation(card.id)}
                className={`relative overflow-hidden rounded-xl cursor-pointer transform transition-all duration-300 hover:scale-105 hover:shadow-2xl ${
                  isDarkMode ? 'bg-gray-800' : 'bg-white'
                } ${card.premium ? 'ring-2 ring-yellow-500' : ''}`}
              >
                {/* Premium Badge */}
                {card.premium && (
                  <div className="absolute top-3 right-3 z-10">
                    <span className="px-2 py-1 text-xs font-bold bg-yellow-500 text-gray-900 rounded-full">
                      PREMIUM
                    </span>
                  </div>
                )}
                
                {/* Gradient Background */}
                <div className={`absolute inset-0 bg-gradient-to-br ${card.color} opacity-10`} />
                
                {/* Content */}
                <div className="relative p-6">
                  {/* Icon and Title */}
                  <div className="flex items-center mb-4">
                    <div className={`p-3 rounded-lg bg-gradient-to-br ${card.color} text-white`}>
                      <card.icon className="w-6 h-6" />
                    </div>
                    <h3 className={`ml-4 text-xl font-bold ${isDarkMode ? 'text-white' : 'text-gray-900'}`}>
                      {card.title}
                    </h3>
                  </div>
                  
                  {/* Description */}
                  <p className={`mb-4 text-sm ${isDarkMode ? 'text-gray-400' : 'text-gray-600'}`}>
                    {card.description}
                  </p>
                  
                  {/* Features */}
                  <div className="mb-4">
                    <div className="flex flex-wrap gap-2">
                      {card.features.slice(0, 3).map((feature, idx) => (
                        <span
                          key={idx}
                          className={`px-2 py-1 text-xs rounded-full ${
                            isDarkMode ? 'bg-gray-700 text-gray-300' : 'bg-gray-100 text-gray-700'
                          }`}
                        >
                          {feature}
                        </span>
                      ))}
                      {card.features.length > 3 && (
                        <span className={`px-2 py-1 text-xs rounded-full ${
                          isDarkMode ? 'bg-gray-700 text-gray-300' : 'bg-gray-100 text-gray-700'
                        }`}>
                          +{card.features.length - 3} more
                        </span>
                      )}
                    </div>
                  </div>
                  
                  {/* Metrics */}
                  {card.metrics && card.metrics.length > 0 && (
                    <div className={`pt-4 border-t ${isDarkMode ? 'border-gray-700' : 'border-gray-200'}`}>
                      <div className="grid grid-cols-2 gap-4">
                        {card.metrics.map((metric, idx) => (
                          <div key={idx}>
                            <p className={`text-xs ${isDarkMode ? 'text-gray-500' : 'text-gray-500'}`}>
                              {metric.label}
                            </p>
                            <p className={`text-sm font-bold ${isDarkMode ? 'text-white' : 'text-gray-900'}`}>
                              {metric.value}
                            </p>
                          </div>
                        ))}
                      </div>
                    </div>
                  )}
                  
                  {/* Click to Enter */}
                  <div className={`mt-4 flex items-center text-sm font-medium ${
                    isDarkMode ? 'text-gray-400' : 'text-gray-600'
                  }`}>
                    <span>Click to enter</span>
                    <ChevronLeft className="w-4 h-4 ml-1 rotate-180" />
                  </div>
                </div>
              </div>
            ))}
          </div>
        )
      
      case 'performance':
        return <PerformanceAnalysis portfolio={portfolio} />
      
      case 'risk':
        return <RiskAnalysis holdings={parseResult.holdings} isDarkMode={isDarkMode} />
      
      case 'charts':
        return <PerformanceCharts holdings={parseResult.holdings} isDarkMode={isDarkMode} />
      
      case 'sector':
        return <SectorAnalysis holdings={parseResult.holdings} isDarkMode={isDarkMode} />
      
      case 'gips':
        return (
          <div className="p-8">
            <div className="max-w-4xl mx-auto">
              <div className="bg-gradient-to-br from-yellow-500 to-amber-600 rounded-xl p-8 text-white mb-8">
                <Award className="w-16 h-16 mb-4" />
                <h2 className="text-3xl font-bold mb-4">GIPS Compliance Module</h2>
                <p className="text-lg mb-4">Professional GIPS-compliant reporting worth $50K/year to RIAs</p>
                <div className="bg-white/20 rounded-lg p-4 backdrop-blur">
                  <p className="font-semibold mb-2">Premium Feature</p>
                  <p>This feature is part of the Professional plan ($597/month)</p>
                  <p className="mt-2">Includes: Certified calculations, audit-ready reports, composite returns, and verification support.</p>
                </div>
              </div>
              
              <div className="grid grid-cols-1 md:grid-cols-2 gap-6">
                <Card>
                  <h3 className="text-xl font-bold mb-3">GIPS Standards Covered</h3>
                  <ul className="space-y-2">
                    <li className="flex items-center"><span className="mr-2">✅</span> Input Data</li>
                    <li className="flex items-center"><span className="mr-2">✅</span> Calculation Methodology</li>
                    <li className="flex items-center"><span className="mr-2">✅</span> Composite Construction</li>
                    <li className="flex items-center"><span className="mr-2">✅</span> Disclosures</li>
                    <li className="flex items-center"><span className="mr-2">✅</span> Presentation & Reporting</li>
                    <li className="flex items-center"><span className="mr-2">✅</span> Verification</li>
                  </ul>
                </Card>
                
                <Card>
                  <h3 className="text-xl font-bold mb-3">Benefits for RIAs</h3>
                  <ul className="space-y-2">
                    <li className="flex items-center"><span className="mr-2">💰</span> Worth $50K+ annually</li>
                    <li className="flex items-center"><span className="mr-2">🏆</span> Institutional credibility</li>
                    <li className="flex items-center"><span className="mr-2">📊</span> Standardized performance</li>
                    <li className="flex items-center"><span className="mr-2">✔️</span> Regulatory compliance</li>
                    <li className="flex items-center"><span className="mr-2">🎯</span> Win larger accounts</li>
                    <li className="flex items-center"><span className="mr-2">📈</span> Marketing advantage</li>
                  </ul>
                </Card>
              </div>
            </div>
          </div>
        )
      
      case 'tax':
        return (
          <div className="p-8">
            <div className="max-w-4xl mx-auto">
              <div className="bg-gradient-to-br from-indigo-500 to-purple-600 rounded-xl p-8 text-white mb-8">
                <Wallet className="w-16 h-16 mb-4" />
                <h2 className="text-3xl font-bold mb-4">Tax Loss Harvesting</h2>
                <p className="text-lg mb-4">Save clients $10K+ annually with intelligent tax strategies</p>
                <div className="bg-white/20 rounded-lg p-4 backdrop-blur">
                  <p className="font-semibold mb-2">Premium Feature</p>
                  <p>This feature is part of the Enterprise plan ($997/month)</p>
                  <p className="mt-2">Includes: Loss identification, wash sale detection, tax alpha reports, and optimization strategies.</p>
                </div>
              </div>
              
              <div className="grid grid-cols-1 md:grid-cols-2 gap-6">
                <Card>
                  <h3 className="text-xl font-bold mb-3">Tax Optimization Features</h3>
                  <ul className="space-y-2">
                    <li className="flex items-center"><span className="mr-2">📉</span> Identify tax loss opportunities</li>
                    <li className="flex items-center"><span className="mr-2">🚫</span> Wash sale rule compliance</li>
                    <li className="flex items-center"><span className="mr-2">💡</span> Tax-efficient rebalancing</li>
                    <li className="flex items-center"><span className="mr-2">📊</span> Tax alpha reporting</li>
                    <li className="flex items-center"><span className="mr-2">🎯</span> Lot-level optimization</li>
                    <li className="flex items-center"><span className="mr-2">📈</span> After-tax returns focus</li>
                  </ul>
                </Card>
                
                <Card>
                  <h3 className="text-xl font-bold mb-3">Client Benefits</h3>
                  <ul className="space-y-2">
                    <li className="flex items-center"><span className="mr-2">💰</span> Save $10K+ annually</li>
                    <li className="flex items-center"><span className="mr-2">📉</span> Offset capital gains</li>
                    <li className="flex items-center"><span className="mr-2">🛡️</span> Reduce tax liability</li>
                    <li className="flex items-center"><span className="mr-2">📊</span> Improve after-tax returns</li>
                    <li className="flex items-center"><span className="mr-2">✅</span> IRS compliant</li>
                    <li className="flex items-center"><span className="mr-2">🎯</span> Automated monitoring</li>
                  </ul>
                </Card>
              </div>
            </div>
          </div>
        )
      
      case 'holdings':
        return (
          <div className="p-8">
            <h2 className="text-2xl font-bold mb-6">Holdings Details</h2>
            <div className="overflow-x-auto">
              <table className={`w-full ${isDarkMode ? 'bg-gray-800' : 'bg-white'} rounded-lg overflow-hidden`}>
                <thead className={isDarkMode ? 'bg-gray-700' : 'bg-gray-100'}>
                  <tr>
                    <th className="px-4 py-3 text-left">Symbol</th>
                    <th className="px-4 py-3 text-left">Name</th>
                    <th className="px-4 py-3 text-right">Shares</th>
                    <th className="px-4 py-3 text-right">Price</th>
                    <th className="px-4 py-3 text-right">Market Value</th>
                    <th className="px-4 py-3 text-right">% of Portfolio</th>
                  </tr>
                </thead>
                <tbody>
                  {parseResult.holdings.map((holding, idx) => (
                    <tr key={idx} className={`border-t ${isDarkMode ? 'border-gray-700' : 'border-gray-200'}`}>
                      <td className="px-4 py-3 font-medium">{holding.symbol}</td>
                      <td className="px-4 py-3">{holding.name}</td>
                      <td className="px-4 py-3 text-right">{holding.shares.toLocaleString()}</td>
                      <td className="px-4 py-3 text-right">${holding.currentPrice.toFixed(2)}</td>
                      <td className="px-4 py-3 text-right">${holding.marketValue.toLocaleString('en-US', { minimumFractionDigits: 2, maximumFractionDigits: 2 })}</td>
                      <td className="px-4 py-3 text-right">{((holding.marketValue / (portfolioMetrics?.totalValue || 1)) * 100).toFixed(2)}%</td>
                    </tr>
                  ))}
                </tbody>
                <tfoot className={`${isDarkMode ? 'bg-gray-700' : 'bg-gray-100'} font-bold`}>
                  <tr>
                    <td colSpan={4} className="px-4 py-3">Total Portfolio Value</td>
                    <td className="px-4 py-3 text-right">${portfolioMetrics?.totalValue.toLocaleString('en-US', { minimumFractionDigits: 2, maximumFractionDigits: 2 })}</td>
                    <td className="px-4 py-3 text-right">100.00%</td>
                  </tr>
                </tfoot>
              </table>
            </div>
          </div>
        )
      
      case 'xray':
        return (
          <div className="p-8">
            <h2 className="text-2xl font-bold mb-6">Data X-Ray - 100% Transparency</h2>
            <div className="grid grid-cols-1 lg:grid-cols-2 gap-6">
              <Card>
                <h3 className="text-xl font-bold mb-4">Column Mapping</h3>
                <div className="space-y-2">
                  {parseResult.metadata.columns.map((col, idx) => (
                    <div key={idx} className={`p-2 rounded ${isDarkMode ? 'bg-gray-700' : 'bg-gray-100'}`}>
                      <span className="font-mono text-sm">{col}</span>
                    </div>
                  ))}
                </div>
              </Card>
              
              <Card>
                <h3 className="text-xl font-bold mb-4">Data Quality Metrics</h3>
                <ul className="space-y-3">
                  <li className="flex justify-between">
                    <span>Total Holdings</span>
                    <span className="font-bold">{parseResult.holdings.length}</span>
                  </li>
                  <li className="flex justify-between">
                    <span>Data Completeness</span>
                    <span className="font-bold text-green-500">100%</span>
                  </li>
                  <li className="flex justify-between">
                    <span>Custodian</span>
                    <span className="font-bold">{parseResult.metadata.custodianDetected || 'Universal'}</span>
                  </li>
                  <li className="flex justify-between">
                    <span>Parse Confidence</span>
                    <span className="font-bold text-green-500">High</span>
                  </li>
                  <li className="flex justify-between">
                    <span>Last Updated</span>
                    <span className="font-bold">{portfolioMetrics?.lastUpdated}</span>
                  </li>
                </ul>
              </Card>
            </div>
            
            <Card className="mt-6">
              <h3 className="text-xl font-bold mb-4">Raw Data Preview</h3>
              <div className="overflow-x-auto">
                <pre className={`p-4 rounded ${isDarkMode ? 'bg-gray-900 text-gray-300' : 'bg-gray-100 text-gray-900'} text-xs`}>
                  {JSON.stringify(parseResult.holdings.slice(0, 3), null, 2)}
                </pre>
              </div>
            </Card>
          </div>
        )
      
      case 'reports':
        return (
          <div className="p-8">
            <h2 className="text-2xl font-bold mb-6">Professional Reports</h2>
            <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-6">
              {[
                { name: 'Client Portfolio Summary', type: 'PDF', icon: FileText },
                { name: 'Performance Report', type: 'PDF', icon: TrendingUp },
                { name: 'Risk Analysis Report', type: 'PDF', icon: Shield },
                { name: 'Tax Summary', type: 'Excel', icon: Wallet },
                { name: 'Holdings Detail', type: 'Excel', icon: ClipboardList },
                { name: 'Quarterly Statement', type: 'PDF', icon: BarChart3 }
              ].map((report, idx) => (
                <Card key={idx} className="cursor-pointer hover:shadow-lg transition-shadow">
                  <div className="flex items-center justify-between mb-4">
                    <report.icon className="w-8 h-8 text-blue-500" />
                    <span className={`px-2 py-1 text-xs rounded ${
                      report.type === 'PDF' ? 'bg-red-100 text-red-600' : 'bg-green-100 text-green-600'
                    }`}>
                      {report.type}
                    </span>
                  </div>
                  <h3 className="font-bold mb-2">{report.name}</h3>
                  <button className={`w-full mt-4 py-2 rounded-lg font-medium transition-colors ${
                    isDarkMode 
                      ? 'bg-blue-600 hover:bg-blue-700 text-white' 
                      : 'bg-blue-500 hover:bg-blue-600 text-white'
                  }`}>
                    Generate Report
                  </button>
                </Card>
              ))}
            </div>
          </div>
        )
      
      default:
        return null
    }
  }

  return (
    <div className={`min-h-screen ${isDarkMode ? 'bg-gray-900 text-white' : 'bg-gray-50 text-gray-900'}`}>
      {/* Header */}
      <header className={`${isDarkMode ? 'bg-gray-800 border-gray-700' : 'bg-white border-gray-200'} border-b sticky top-0 z-50`}>
        <div className="max-w-7xl mx-auto px-4 sm:px-6 lg:px-8">
          <div className="flex items-center justify-between h-16">
            {/* Left: Logo and Navigation */}
            <div className="flex items-center">
              {/* Mobile Menu Button */}
              <button
                onClick={() => setShowMobileMenu(!showMobileMenu)}
                className="md:hidden p-2 rounded-lg hover:bg-gray-700"
              >
                {showMobileMenu ? <X className="w-6 h-6" /> : <Menu className="w-6 h-6" />}
              </button>
              
              {/* Logo */}
              <div className="flex items-center ml-2 md:ml-0">
                <BarChart3 className="w-8 h-8 text-blue-500 mr-2" />
                <h1 className="text-xl font-bold bg-gradient-to-r from-blue-500 to-cyan-500 bg-clip-text text-transparent">
                  Portfolio X-Ray Pro™
                </h1>
              </div>
              
              {/* Breadcrumb Navigation */}
              {parseResult && currentView !== 'dashboard' && (
                <div className="hidden md:flex items-center ml-8">
                  <button
                    onClick={() => handleNavigation('dashboard')}
                    className="flex items-center text-sm hover:text-blue-500 transition-colors"
                  >
                    <Home className="w-4 h-4 mr-1" />
                    Dashboard
                  </button>
                  <ChevronLeft className="w-4 h-4 mx-2 rotate-180 text-gray-400" />
                  <span className="text-sm font-medium">
                    {dashboardCards.find(c => c.id === currentView)?.title || currentView}
                  </span>
                </div>
              )}
            </div>
            
            {/* Right: Actions */}
            <div className="flex items-center space-x-4">
              {parseResult && (
                <>
                  <span className="hidden md:block text-sm text-gray-500">
                    {portfolioMetrics?.totalHoldings} holdings • ${portfolioMetrics?.totalValue.toLocaleString()}
                  </span>
                  <button
                    onClick={handleReset}
                    className="flex items-center px-3 py-1.5 text-sm rounded-lg bg-red-500 hover:bg-red-600 text-white transition-colors"
                  >
                    <XCircle className="w-4 h-4 mr-1" />
                    New Portfolio
                  </button>
                </>
              )}
              
              <button
                onClick={() => setIsDarkMode(!isDarkMode)}
                className={`p-2 rounded-lg ${isDarkMode ? 'bg-gray-700 hover:bg-gray-600' : 'bg-gray-200 hover:bg-gray-300'} transition-colors`}
              >
                {isDarkMode ? '🌙' : '☀️'}
              </button>
            </div>
          </div>
        </div>
        
        {/* Mobile Navigation Menu */}
        {showMobileMenu && parseResult && (
          <div className={`md:hidden ${isDarkMode ? 'bg-gray-800' : 'bg-white'} border-t ${isDarkMode ? 'border-gray-700' : 'border-gray-200'}`}>
            <div className="px-4 py-2 space-y-1">
              <button
                onClick={() => handleNavigation('dashboard')}
                className={`w-full text-left px-3 py-2 rounded-lg ${
                  currentView === 'dashboard' ? 'bg-blue-500 text-white' : 'hover:bg-gray-700'
                }`}
              >
                Dashboard
              </button>
              {dashboardCards.map((card) => (
                <button
                  key={card.id}
                  onClick={() => handleNavigation(card.id)}
                  className={`w-full text-left px-3 py-2 rounded-lg ${
                    currentView === card.id ? 'bg-blue-500 text-white' : 'hover:bg-gray-700'
                  }`}
                >
                  {card.title}
                  {card.premium && <span className="ml-2 text-xs text-yellow-400">Premium</span>}
                </button>
              ))}
            </div>
          </div>
        )}
      </header>
      
      {/* Main Content */}
      <main className="max-w-7xl mx-auto px-4 sm:px-6 lg:px-8 py-8">
        {!parseResult ? (
          <div className="flex flex-col items-center justify-center min-h-[60vh]">
            <div className="text-center mb-8">
              <BarChart3 className="w-16 h-16 text-blue-500 mx-auto mb-4" />
              <h2 className="text-3xl font-bold mb-2">Welcome to Portfolio X-Ray Pro™</h2>
              <p className={`text-lg ${isDarkMode ? 'text-gray-400' : 'text-gray-600'}`}>
                The world's most transparent portfolio analytics platform
              </p>
              <p className={`text-sm mt-2 ${isDarkMode ? 'text-gray-500' : 'text-gray-500'}`}>
                Works with any custodian • 100% calculation transparency • No contracts
              </p>
            </div>
            
            <CSVUploader onDataParsed={handleCSVUpload} isDarkMode={isDarkMode} />
            
            <div className="mt-12 grid grid-cols-1 md:grid-cols-3 gap-6 text-center">
              <div>
                <Shield className="w-10 h-10 text-green-500 mx-auto mb-2" />
                <h3 className="font-bold mb-1">Universal Support</h3>
                <p className={`text-sm ${isDarkMode ? 'text-gray-400' : 'text-gray-600'}`}>
                  Works with 15+ major custodians
                </p>
              </div>
              <div>
                <Eye className="w-10 h-10 text-blue-500 mx-auto mb-2" />
                <h3 className="font-bold mb-1">100% Transparent</h3>
                <p className={`text-sm ${isDarkMode ? 'text-gray-400' : 'text-gray-600'}`}>
                  See every calculation step
                </p>
              </div>
              <div>
                <TrendingUp className="w-10 h-10 text-purple-500 mx-auto mb-2" />
                <h3 className="font-bold mb-1">Professional Grade</h3>
                <p className={`text-sm ${isDarkMode ? 'text-gray-400' : 'text-gray-600'}`}>
                  GIPS-compliant reporting ready
                </p>
              </div>
            </div>
          </div>
        ) : (
          <>
            {/* Back to Dashboard button for current view */}
            {currentView !== 'dashboard' && (
              <button
                onClick={() => handleNavigation('dashboard')}
                className={`mb-6 flex items-center px-4 py-2 rounded-lg transition-colors ${
                  isDarkMode 
                    ? 'bg-gray-800 hover:bg-gray-700 text-white' 
                    : 'bg-white hover:bg-gray-100 text-gray-900 border border-gray-200'
                }`}
              >
                <ChevronLeft className="w-4 h-4 mr-2" />
                Back to Dashboard
              </button>
            )}
            
            {/* Render current view */}
            {renderCurrentView()}
          </>
        )}
      </main>
      
      {/* Footer */}
      <footer className={`mt-auto py-8 ${isDarkMode ? 'bg-gray-800 border-gray-700' : 'bg-white border-gray-200'} border-t`}>
        <div className="max-w-7xl mx-auto px-4 sm:px-6 lg:px-8">
          <div className="text-center">
            <p className={`text-sm ${isDarkMode ? 'text-gray-400' : 'text-gray-600'}`}>
              © 2025 Portfolio X-Ray Pro™ • Built for Morningstar refugees • $297/month, no contracts
            </p>
            <p className={`text-xs mt-2 ${isDarkMode ? 'text-gray-500' : 'text-gray-500'}`}>
              Escape the 5-year contracts • Join the transparency revolution
            </p>
          </div>
        </div>
      </footer>
    </div>
  )
}

export default App